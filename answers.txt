# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Zhiyang Wang
Student ID: 303991529
Email: seanwangsk@gmail.com

# Partner 2 (if you're working in a team)
Name: 
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
If a malicious node query a file whose name's length is super large, when the local system try to get the name, there will be a buffer overflow error. So when trying to grab the file name in the request, now we add a file name length check 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. Local file restriction
We fulfill the local file restriction by check the head of the requested file name. If it starts with "/", "../" or "~/", then it seems the application trying to access external files, then we just drop the request. Since I've tried to see whether Unix system path parsing could accept blank characters like space in the head and find out that adding blank characters in the head of the path string will cause open syscall error, so its just safe to detect the external file accessing 

2. Infinite file size:
If the peer keeps transferring data without a EOF to end the transmission (so that every remote read will sucess), the local disk will run full. The evil peer could do this by just having a loop repeatly transferring meaningless data. As the max file size in ext3 is 2GB, we also set the max file size we support in the p2p application as 2GB. 

3. Popular tracker

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

# Extra credit problems
#Extra credit problem: checksum
In our system, the md5 funcitons is encapsulated into our function called "get_md5" which takes a file name as an input argument and return the md5 value for its content. 

the function is called in the following places:
1. when registering the files to the tracker when first connected with the tracker
2. when finishing downloading, the system will query the checksum from the tracker for the checksum and makes the comparison. (Notice that after finished downloading, although we will register the ownership of the downloaded file to the server, this time we dont need to send checksum again since its the same as the one for the file from other peers).


# Add any other information you'd like us to know below this line.
